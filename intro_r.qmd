# Introduction to R {#sec-intro-r}

This first lecture is designed to take you from zero to the first step in data analysis --- being able to load a dataset into R and look at it.
The most important concepts and skills we'll hit are the following:

1.  Files on your computer live in directories.
    Your [working directory]{.concept} lets R know where to look for files, as well as where to save any files you might create.
    
2.  We'll code in the context of [Quarto]{.concept} files.
    These let us mix together plain text with R code.
    You can look at the results of the code in RStudio as you go along, as well as compiling everything into a single document.
    
3.  Throughout the course we will rely heavily on the [tidyverse package]{.concept} for loading, cleaning, manipulating, and plotting data.
    Today we will use the tidyverse functions for loading and looking at data.

The notes for this course are written using Quarto.
For this lecture and future ones, I encourage you to download the Quarto source code from <https://github.com/brentonk/qps1>.
You can even take your own notes in your copy of the relevant Quarto file (e.g., for today, `intro_r.qmd`).

<!--
If you see this, it's because you took my advice to download the source file and look at it.  Well done!

Comments in Quarto work a bit different than in plain R code.
Everything in between "< ! - -" and "- - >" (without the spaces) is treated as a comment, and won't show up in your output.

You might notice that I include a line break after every sentence.
This is just a habit of mine for writing in Quarto because it makes it easier to move individual sentences around, and because it makes it a bit saner to track Quarto files in Git (a coding topic well beyond the scope of this course).
You don't need to do this.
Fun fact: Most of the people I write papers with hate this habit of mine!
(Shout out to Professor Bisbee for recognizing the benefits of my way.)
-->


## Installing the software for this course

We won't go through this part in class, as I'm assuming you've already followed all of these steps.
Be sure to contact me (<brenton.kenkel@gmail.com>) or the TA (fall 2025: Mason Auten, <mason.auten@vanderbilt.edu>) ASAP if you have trouble installing any of these pieces of software --- all of them are critical for you to be able to complete the work in PSCI 2300.

### R

R is a programming language that originated in the 1990s and became popular among political scientists in the 2000s.
While you could theoretically use R for a variety of programming tasks, in practice it is almost exclusively used for statistical analysis and data science, as it was developed specifically for these tasks.

To install R, just download the program from <https://cran.r-project.org>.

### RStudio

The R that you installed in the last step just comes with very basic utilities for running R and writing R code.
If you're not used to programming, these programs will probably not be very helpful for you.

RStudio is a separate program that runs R in a more friendly and useful environment.
It is called an IDE, which stands for "integrated development environment", a fancy way of saying that it runs R and gives you a space to write R code while providing tools to check your work and make the process easier.

To install RStudio, just download the program from <https://posit.co/download/rstudio-desktop/>.

### tidyverse package {#sec-install-tidyverse}

R comes with some built-in tools for data management and analysis, but R users typically use [packages]{.concept} that extend R's default capabilities.

You will end up installing and using a number of packages during PSCI 2300, but there are two that are absolutely essential to have from the start.

1. tidyverse, which provides a huge set of helpful functions for data management and visualization.
   We'll talk about the tidyverse tools and use them virtually every day in this class.

2. tinytex, a background utility that is needed to compile your assignments to PDF.
   You'll install this once, and --- hopefully --- never have to think about it again.

::: {.aside}
Brightspace, the terrible course management software that Vanderbilt makes us use, doesn't allow annotations on HTML assignment submissions.
By default, Quarto files can only be rendered as HTML, hence we need the extension to allow PDF output.
:::

To install these packages, open up RStudio on your computer.
@fig-rstudio-blank shows what the program will probably look like when you first open it.

![What RStudio looks like when you first open it.](img/rstudio_blank.png){#fig-rstudio-blank .lightbox}

::: {.callout-tip title="Rearranging the RStudio panels" collapse="true"}
I'm picky about my code setup.
When you see me on RStudio in class, you might notice that I'm working with a different layout than the default illustrated in @fig-rstudio-blank.
I prefer to have my source code on the left and any output --- calculations that show up in the R console, plots that show up in the plotting window, or rendered documents that show up in the preview window --- on the right.

When I'm coding in RStudio, my setup looks like this:

![Professor Kenkel's standard RStudio setup.](img/rstudio_bjk.png){.lightbox}

You can change the RStudio layout to suit your own needs by going to the Tools menu, selecting Global Options, and then selecting Pane Layout.

![Setting the RStudio pane layout.](img/rstudio_layout.png){.lightbox}
:::

The [console]{.concept} is the window on the left labeled with the version of R you're running (4.5.1 in my case).
You'll see that the console contains a [prompt]{.concept}, which looks like:

```{.default}
>
```

When you type a command into the prompt and hit enter, R will run your command and display the results.
The simplest type of command is to just use R as a calculator.

```{.default}
> 3.14 * 7^2
[1] 153.86
```

To install new packages, use the `install.packages()` command.
For example, to install the tidyverse package, you'll run `install.packages("tidyverse")`.
After you hit enter, R will show you information about the download and installation process.

```{.default}
> install.packages("tidyverse")
Installing package into ‘/home/brenton/R/x86_64-pc-linux-gnu-library/4.5’
(as ‘lib’ is unspecified)
trying URL 'https://cloud.r-project.org/src/contrib/tidyverse_2.0.0.tar.gz'

[... omitting a bunch more output here ...]

* DONE (tidyverse)
```

::: {.callout-warning title="Even small typos lead to failure"}
You need to run R commands exactly as they're written.
For example, what if you forgot the quotation marks and ran `install.packages(tidyverse)`?

```{.default}
> install.packages(tidyverse)
Error: object 'tidyverse' not found
```

When you run this, R thinks that you're asking it to look for a variable named `tidyverse` that stores the names of the package or packages you want to install.
When it sees that you didn't actually create a variable named `tidyverse`, it stops with an error.

This seems stupid --- shouldn't it infer that you wanted it to install the package named tidyverse?
Indeed, R is stupid in this way, doing no more or no less than you ask it to, and failing whenever you make any kind of minor typo or error.
The problem is that a "smarter" program would also be a more unpredictable one, and we want our programming languages to operate predictably.
:::

Once you've installed a package, you don't need to install it again unless you upgrade the version of R on your computer.
To use a package that you've installed, call it with the `library()` command:

```{r}
library("tidyverse")
```

### tinytex package

The tinytex installation requires two steps.
This is truly specific to tinytex --- as far as I know, none of the other packages we use in this class will require this second step.

To install tinytex, run these two commands in the R console:

```{r}
#| eval: false
install.packages("tinytex")
tinytex::install_tinytex()
```

The first command installs the tinytex R package.
The second command downloads supplemental files used for PDF rendering and installs them to your computer.
After running these two commands, you should never need to directly interface with tinytex again --- Quarto will handle that for you.

### Quarto

If you wanted to code like a pure programmer, you would work in scripts that contain R code and nothing else.
These would be plain text files with a `.r` or `.R` extension.

But we're not trying to become pure programmers in PSCI 2300.
The real goal is to learn how to analyze data to answer questions about politics.
For that purpose, it makes more sense to work in Quarto files, which typically have a `.qmd` extension.

A Quarto file typically contains both regular language and code.
RStudio makes it easy to check the code you're writing as you go along, to make sure it's doing what you expect and that there aren't any errors.
You will ultimately compile, or "render", the Quarto file into a document much like this one.
The document will not only display the code you wrote, but also run that code and show the output.
This makes Quarto a great tool to communicate the results of data analyses.

To install Quarto, just download the program from <https://quarto.org/docs/get-started/>.


## Working with working directories {#sec-working-directories}

One of the conveniences of contemporary computing is that you usually don't have to think about the details of where or how files are stored on your computer.
You can just open up File Explorer or Finder, and it'll show you everything you recently accessed or downloaded.
And if what you're looking for isn't there, you can run a search and it'll come up quick enough.

R, like any programming language, is powerful --- but that power comes at a cost.
You have to be *very explicit* with R about everything, including where to look for files.
R will do exactly what you ask, no more, no less.

By default, R looks for files in the [working directory]{.concept}.
You can run the `getwd()` command (as in: `get` the `w`orking `d`irectory) in the R console to see what your current working directory is.

```{r}
getwd()
```

If you're on Windows, the default working directory is probably `C:/Users/username/Documents`.
On a Mac, it's probably `/Users/username`.

You can use the `setwd()` command in the R console to change your working directory.
Alternatively, it's probably easier to use the RStudio file browser to set the working directory, especially if you're not a middle-aged MS-DOS veteran who has their computer's directory hierarchy memorized.

![Setting the working directory in RStudio.](img/rstudio_setwd.png){#fig-setwd .lightbox}

Sometimes you'll see people use `setwd()` to set the working directory within their R scripts or Quarto files.
Don't do this.
Everyone's computer is different, with a different directory structure.
So if someone else --- say, the TA or professor who is grading your problem set --- downloads your file and tries to run the code, it'll likely stop with an error when `setwd()` looks for a directory that doesn't exist.

For this class, I would recommend creating a `psci2300` directory somewhere easy to access, then create new directories inside of there for each set of lecture notes and each problem set.
What's most important, though, is that you keep the files for this course *somewhere* that you can remember, and that you set R's working directory accordingly.

tl;dr:

- Put your files in a directory where you can find them.

- `setwd()` to that directory when doing data analysis in R.

- If R isn't finding the files you need, use `getwd()` to see where it's looking for them.
  Then either put the files there, or `setwd()` to wherever they are.


## Quarto {#sec-quarto}

We will do all of our work within Quarto files.
A Quarto file is a plain text file: if you open it in a bare-bones editor like Notepad (Windows) or TextEdit (Mac), you will see exactly the same content that you see in RStudio, except without the pretty colors used for syntax highlighting.

There are three components to a Quarto file:

1.  The [header]{.concept} at the top, containing metadata about the document like the title and author.
    It also contains instructions for the Quarto engine on how to render it.
    
2.  [Text]{.concept} written in Markdown format.
    This contains the, like, words that you would use to say, um, stuff.
    
3.  [Code chunks]{.concept} containing R code.
    When you render the Quarto document, it runs these code chunks in R.
    The output is then displayed in the document, like how above in the ["Working with working directories"](#sec-working-directories) section it showed the output of `getwd()` when I compiled these notes on my computer.

We will only cover the bare bones of writing files in Quarto.
For truly comprehensive information, see the documentation [on Quarto's website](https://quarto.org/docs/authoring/markdown-basics.html).
 
### The header

<!--
This file's header is a bit different than the example given here because it's part of a bigger project, with metadata stored in a separate file.
-->

The very first thing in a Quarto file is a header.
A typical header might look something like this:

```yaml
---
title: "Introduction to R"
author: "Brenton Kenkel"
date: 2025-08-26
format:
  pdf:
    fontsize: 12pt
    highlight-style: tango
---
```

The `title` line specifies the title of the document.
Everything *inside* the quotation marks is considered the title; the quotation marks themselves are not treated as part of the title.
If you needed to include quotation marks in your title for some reason, you would "escape" them with a backslash like this:

```{.yaml}
title: "Yeah, I \"Needed\" Quotation Marks in the Title"
```

The `author` block specifies the author.
It works just like the `title` block.

The `date` block specifies the date.
Programming languages like R typically best manage dates in YYYY-MM-DD format, so that's how I write the date.
But you can just write it however you want it to show up in the output document, being careful to use quotation marks if there are commas or colons or the like.

```{.yaml}
date: "The 21st day of August, Year of the Depend Adult Undergarment"
```

The `format` block specifies the default format that the document should be rendered as.
The most common formats are `pdf`, which you'll use for your problem sets in this class, and `html`.
The `fontsize` and `highlight-style` options within the `pdf` block in the example header control the look of the PDF that's rendered.
There are tons more options documented on [the Quarto website](https://quarto.org/docs/output-formats/pdf-basics.html).
But don't worry too much about having to work through these --- for the problem sets, I'll distribute a template with a premade header that you just have to plug your name into.

### Ordinary text in Markdown format

You write a Quarto document in plain text.
There's some special syntax you can use to mark up that text with formatting (bold, italics), to include headings and hyperlinks, place images, and so on.
One of the best ways to learn the syntax is to just download the `.qmd` source for these lecture notes and compare to the output.
And here's a quick guide to the most useful pieces of syntax:

```{.markdown}
# Big heading

## Medium heading

### Small heading

You can make things *italic* or **bold**.  You can even put things in `code font`.

*   this is
*   a bulleted
*   list

<!--
This is a comment!
It won't show up in the rendered output!
-->

You can include [hyperlinks](https://vanderbilt.edu).

1.  this is
2.  a numbered
3.  list

Finally, you can include images:

![](https://i.redd.it/tospo6k2u9l81.png)
```

### Code blocks

The special thing about Quarto is that you can include blocks of R code.
(Or Python, if you're into snakes.)
When you render the document, the code you put into each block will be run in R, and the output will be included in the document.

As a quick example, we can have R do some basic arithmetic for us.

```{r}
7 * 6
```

To create the above, all I entered in my Quarto source file was the following:

````
```{{r}}
7 * 6
```
````

<!--
The quadruple-backtick/double-brackets syntax above is a hack so that the output in the rendered document will look like a regular Quarto code block.
See https://quarto.org/docs/computations/execution-options.html#fenced-echo for details.
-->

The triple backticks tell Quarto: "Everything after this is code, until the next set of triple backticks."
The `{r}` then tells Quarto: "Not only is this code, but this is R code that you should run."

If you don't want to remember this goofy syntax yourself, you can run `Code -> Insert Chunk` from the RStudio menu.
Or even better, for the efficiency aficionados, hit `Ctrl-Alt-I` (Windows) or `Command-Option-I` (Mac).

You usually won't need to use anything other than the default code chunk.
But sometimes you will want to customize.
For example, as we saw when running `library("tidyverse")` at the end of @sec-install-tidyverse, loading the tidyverse package spits out a bunch of annoying messages that I usually don't want cluttering up my Quarto output.
To keep these out, I can use the `message: false` option for the code block where I load tidyverse:

````
```{{r}}
#| message: false
library("tidyverse")
```
````

Or if I were creating a figure, I might use the `fig-cap` option to add a caption to it:

````
```{{r}}
#| fig-cap: "Popularity of polar bears over time"
df_polar_bears |>
  ggplot(aes(x = year, y = popularity)) +
  geom_line()
```
````

See the [Quarto documentation](https://quarto.org/docs/computations/execution-options.html) for the comprehensive list of chunk options.
FYI, I have used Quarto and its predecessor R Markdown for a decade and have never used 90% of these, so don't worry about trying to figure them all out.

### Rendering

When you're done writing your Quarto file and want to turn it into a PDF, hit the "Render" button in the RStudio interface.
Assuming that there aren't any errors in your R code chunks that prevent the document from compiling, you'll see the PDF output in RStudio's Preview window (or perhaps in an external browser or PDF viewer, depending on RStudio's settings).

But you really shouldn't wait until you're all done to render.
As you write, you should [regularly take a look at the rendered output]{.underline} to make sure there are no errors and that it looks how you expect.
When I'm writing in Quarto (including these notes), at a minimum I re-render and check the output every time I finish writing a paragraph of text or a full code block.
Even more aggressively, you can check the "Render on Save" box to automatically render the document every time you save.
