[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quantitative Political Science I",
    "section": "",
    "text": "Preface\nThese are the course notes for Prof. Brenton Kenkel’s course PSCI 2300 (Quantitative Political Science I: Computing) at Vanderbilt University.\nThese notes are written in Quarto and published on GitHub Pages. You can find the Quarto source files on GitHub.\nAcknowledgments: I’ve taken a lot from lecture notes written by my colleague Josh Clinton for prior iterations of PSCI 2300. My colleague Jim Bisbee’s notes for his offering of DS 1000 have been helpful too. I’m also grateful to students from the fall 2024 offering of PSCI 2300 for their suggestions, and to Nguyen Ha who gave lots of helpful feedback in her capacity as the TA.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro_r.html",
    "href": "intro_r.html",
    "title": "1  Introduction to R",
    "section": "",
    "text": "1.1 Installing the software for this course\nThis first lecture is designed to take you from zero to the first step in data analysis — being able to load a dataset into R and look at it. The most important concepts and skills we’ll hit are the following:\nThe notes for this course are written using Quarto. For this lecture and future ones, I encourage you to download the Quarto source code from https://github.com/brentonk/qps1. You can even take your own notes in your copy of the relevant Quarto file (e.g., for today, intro_r.qmd).\nWe won’t go through this part in class, as I’m assuming you’ve already followed all of these steps. Be sure to contact me (brenton.kenkel@gmail.com) or the TA (fall 2025: Mason Auten, mason.auten@vanderbilt.edu) ASAP if you have trouble installing any of these pieces of software — all of them are critical for you to be able to complete the work in PSCI 2300.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#installing-the-software-for-this-course",
    "href": "intro_r.html#installing-the-software-for-this-course",
    "title": "1  Introduction to R",
    "section": "",
    "text": "1.1.1 R\nR is a programming language that originated in the 1990s and became popular among political scientists in the 2000s. While you could theoretically use R for a variety of programming tasks, in practice it is almost exclusively used for statistical analysis and data science, as it was developed specifically for these tasks.\nTo install R, just download the program from https://cran.r-project.org.\n\n\n1.1.2 RStudio\nThe R that you installed in the last step just comes with very basic utilities for running R and writing R code. If you’re not used to programming, these programs will probably not be very helpful for you.\nRStudio is a separate program that runs R in a more friendly and useful environment. It is called an IDE, which stands for “integrated development environment”, a fancy way of saying that it runs R and gives you a space to write R code while providing tools to check your work and make the process easier.\nTo install RStudio, just download the program from https://posit.co/download/rstudio-desktop/.\n\n\n1.1.3 tidyverse package\nR comes with some built-in tools for data management and analysis, but R users typically use packages that extend R’s default capabilities.\nYou will end up installing and using a number of packages during PSCI 2300, but there are two that are absolutely essential to have from the start.\n\ntidyverse, which provides a huge set of helpful functions for data management and visualization. We’ll talk about the tidyverse tools and use them virtually every day in this class.\ntinytex, a background utility that is needed to compile your assignments to PDF. You’ll install this once, and — hopefully — never have to think about it again.\n\n\n\nBrightspace, the terrible course management software that Vanderbilt makes us use, doesn’t allow annotations on HTML assignment submissions. By default, Quarto files can only be rendered as HTML, hence we need the extension to allow PDF output.\nTo install these packages, open up RStudio on your computer. Figure 1.1 shows what the program will probably look like when you first open it.\n\n\n\nFigure 1.1: What RStudio looks like when you first open it.\n\n\n\n\n\n\n\n\n\n\n\n\nRearranging the RStudio panels\n\n\n\n\n\nI’m picky about my code setup. When you see me on RStudio in class, you might notice that I’m working with a different layout than the default illustrated in Figure 1.1. I prefer to have my source code on the left and any output — calculations that show up in the R console, plots that show up in the plotting window, or rendered documents that show up in the preview window — on the right.\nWhen I’m coding in RStudio, my setup looks like this:\n\n\nProfessor Kenkel’s standard RStudio setup.\n\n\n\nYou can change the RStudio layout to suit your own needs by going to the Tools menu, selecting Global Options, and then selecting Pane Layout.\n\n\nSetting the RStudio pane layout.\n\n\n\n\n\n\nThe console is the window on the left labeled with the version of R you’re running (4.5.1 in my case). You’ll see that the console contains a prompt, which looks like:\n&gt;\nWhen you type a command into the prompt and hit enter, R will run your command and display the results. The simplest type of command is to just use R as a calculator.\n&gt; 3.14 * 7^2\n[1] 153.86\nTo install new packages, use the install.packages() command. For example, to install the tidyverse package, you’ll run install.packages(\"tidyverse\"). After you hit enter, R will show you information about the download and installation process.\n&gt; install.packages(\"tidyverse\")\nInstalling package into ‘/home/brenton/R/x86_64-pc-linux-gnu-library/4.5’\n(as ‘lib’ is unspecified)\ntrying URL 'https://cloud.r-project.org/src/contrib/tidyverse_2.0.0.tar.gz'\n\n[... omitting a bunch more output here ...]\n\n* DONE (tidyverse)\n\n\n\n\n\n\nEven small typos lead to failure\n\n\n\nYou need to run R commands exactly as they’re written. For example, what if you forgot the quotation marks and ran install.packages(tidyverse)?\n&gt; install.packages(tidyverse)\nError: object 'tidyverse' not found\nWhen you run this, R thinks that you’re asking it to look for a variable named tidyverse that stores the names of the package or packages you want to install. When it sees that you didn’t actually create a variable named tidyverse, it stops with an error.\nThis seems stupid — shouldn’t it infer that you wanted it to install the package named tidyverse? Indeed, R is stupid in this way, doing no more or no less than you ask it to, and failing whenever you make any kind of minor typo or error. The problem is that a “smarter” program would also be a more unpredictable one, and we want our programming languages to operate predictably.\n\n\nOnce you’ve installed a package, you don’t need to install it again unless you upgrade the version of R on your computer. To use a package that you’ve installed, call it with the library() command:\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n1.1.4 tinytex package\nThe tinytex installation requires two steps. This is truly specific to tinytex — as far as I know, none of the other packages we use in this class will require this second step.\nTo install tinytex, run these two commands in the R console:\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n\nThe first command installs the tinytex R package. The second command downloads supplemental files used for PDF rendering and installs them to your computer. After running these two commands, you should never need to directly interface with tinytex again — Quarto will handle that for you.\n\n\n1.1.5 Quarto\nIf you wanted to code like a pure programmer, you would work in scripts that contain R code and nothing else. These would be plain text files with a .r or .R extension.\nBut we’re not trying to become pure programmers in PSCI 2300. The real goal is to learn how to analyze data to answer questions about politics. For that purpose, it makes more sense to work in Quarto files, which typically have a .qmd extension.\nA Quarto file typically contains both regular language and code. RStudio makes it easy to check the code you’re writing as you go along, to make sure it’s doing what you expect and that there aren’t any errors. You will ultimately compile, or “render”, the Quarto file into a document much like this one. The document will not only display the code you wrote, but also run that code and show the output. This makes Quarto a great tool to communicate the results of data analyses.\nTo install Quarto, just download the program from https://quarto.org/docs/get-started/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#sec-working-directories",
    "href": "intro_r.html#sec-working-directories",
    "title": "1  Introduction to R",
    "section": "1.2 Working with working directories",
    "text": "1.2 Working with working directories\nOne of the conveniences of contemporary computing is that you usually don’t have to think about the details of where or how files are stored on your computer. You can just open up File Explorer or Finder, and it’ll show you everything you recently accessed or downloaded. And if what you’re looking for isn’t there, you can run a search and it’ll come up quick enough.\nR, like any programming language, is powerful — but that power comes at a cost. You have to be very explicit with R about everything, including where to look for files. R will do exactly what you ask, no more, no less.\nBy default, R looks for files in the working directory. You can run the getwd() command (as in: get the working directory) in the R console to see what your current working directory is.\n\ngetwd()\n\n[1] \"/home/brenton/Dropbox/courses/qps1/notes\"\n\n\nIf you’re on Windows, the default working directory is probably C:/Users/username/Documents. On a Mac, it’s probably /Users/username.\nYou can use the setwd() command in the R console to change your working directory. Alternatively, it’s probably easier to use the RStudio file browser to set the working directory, especially if you’re not a middle-aged MS-DOS veteran who has their computer’s directory hierarchy memorized.\n\n\n\nFigure 1.2: Setting the working directory in RStudio.\n\n\n\n\n\n\nSometimes you’ll see people use setwd() to set the working directory within their R scripts or Quarto files. Don’t do this. Everyone’s computer is different, with a different directory structure. So if someone else — say, the TA or professor who is grading your problem set — downloads your file and tries to run the code, it’ll likely stop with an error when setwd() looks for a directory that doesn’t exist.\nFor this class, I would recommend creating a psci2300 directory somewhere easy to access, then create new directories inside of there for each set of lecture notes and each problem set. What’s most important, though, is that you keep the files for this course somewhere that you can remember, and that you set R’s working directory accordingly.\ntl;dr:\n\nPut your files in a directory where you can find them.\nsetwd() to that directory when doing data analysis in R.\nIf R isn’t finding the files you need, use getwd() to see where it’s looking for them. Then either put the files there, or setwd() to wherever they are.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#sec-quarto",
    "href": "intro_r.html#sec-quarto",
    "title": "1  Introduction to R",
    "section": "1.3 Quarto",
    "text": "1.3 Quarto\nWe will do all of our work within Quarto files. A Quarto file is a plain text file: if you open it in a bare-bones editor like Notepad (Windows) or TextEdit (Mac), you will see exactly the same content that you see in RStudio, except without the pretty colors used for syntax highlighting.\nThere are three components to a Quarto file:\n\nThe header at the top, containing metadata about the document like the title and author. It also contains instructions for the Quarto engine on how to render it.\nText written in Markdown format. This contains the, like, words that you would use to say, um, stuff.\nCode chunks containing R code. When you render the Quarto document, it runs these code chunks in R. The output is then displayed in the document, like how above in the “Working with working directories” section it showed the output of getwd() when I compiled these notes on my computer.\n\nWe will only cover the bare bones of writing files in Quarto. For truly comprehensive information, see the documentation on Quarto’s website.\n\n1.3.1 The header\n\nThe very first thing in a Quarto file is a header. A typical header might look something like this:\n---\ntitle: \"Introduction to R\"\nauthor: \"Brenton Kenkel\"\ndate: 2025-08-26\nformat:\n  pdf:\n    fontsize: 12pt\n    highlight-style: tango\n---\nThe title line specifies the title of the document. Everything inside the quotation marks is considered the title; the quotation marks themselves are not treated as part of the title. If you needed to include quotation marks in your title for some reason, you would “escape” them with a backslash like this:\ntitle: \"Yeah, I \\\"Needed\\\" Quotation Marks in the Title\"\nThe author block specifies the author. It works just like the title block.\nThe date block specifies the date. Programming languages like R typically best manage dates in YYYY-MM-DD format, so that’s how I write the date. But you can just write it however you want it to show up in the output document, being careful to use quotation marks if there are commas or colons or the like.\ndate: \"The 21st day of August, Year of the Depend Adult Undergarment\"\nThe format block specifies the default format that the document should be rendered as. The most common formats are pdf, which you’ll use for your problem sets in this class, and html. The fontsize and highlight-style options within the pdf block in the example header control the look of the PDF that’s rendered. There are tons more options documented on the Quarto website. But don’t worry too much about having to work through these — for the problem sets, I’ll distribute a template with a premade header that you just have to plug your name into.\n\n\n1.3.2 Ordinary text in Markdown format\nYou write a Quarto document in plain text. There’s some special syntax you can use to mark up that text with formatting (bold, italics), to include headings and hyperlinks, place images, and so on. One of the best ways to learn the syntax is to just download the .qmd source for these lecture notes and compare to the output. And here’s a quick guide to the most useful pieces of syntax:\n# Big heading\n\n## Medium heading\n\n### Small heading\n\nYou can make things *italic* or **bold**.  You can even put things in `code font`.\n\n*   this is\n*   a bulleted\n*   list\n\n&lt;!--\nThis is a comment!\nIt won't show up in the rendered output!\n--&gt;\n\nYou can include [hyperlinks](https://vanderbilt.edu).\n\n1.  this is\n2.  a numbered\n3.  list\n\nFinally, you can include images:\n\n![](https://i.redd.it/tospo6k2u9l81.png)\n\n\n1.3.3 Code blocks\nThe special thing about Quarto is that you can include blocks of R code. (Or Python, if you’re into snakes.) When you render the document, the code you put into each block will be run in R, and the output will be included in the document.\nAs a quick example, we can have R do some basic arithmetic for us.\n\n7 * 6\n\n[1] 42\n\n\nTo create the above, all I entered in my Quarto source file was the following:\n```{r}\n7 * 6\n```\n\nThe triple backticks tell Quarto: “Everything after this is code, until the next set of triple backticks.” The {r} then tells Quarto: “Not only is this code, but this is R code that you should run.”\nIf you don’t want to remember this goofy syntax yourself, you can run Code -&gt; Insert Chunk from the RStudio menu. Or even better, for the efficiency aficionados, hit Ctrl-Alt-I (Windows) or Command-Option-I (Mac).\nYou usually won’t need to use anything other than the default code chunk. But sometimes you will want to customize. For example, as we saw when running library(\"tidyverse\") at the end of Section 1.1.3, loading the tidyverse package spits out a bunch of annoying messages that I usually don’t want cluttering up my Quarto output. To keep these out, I can use the message: false option for the code block where I load tidyverse:\n```{r}\n#| message: false\nlibrary(\"tidyverse\")\n```\nOr if I were creating a figure, I might use the fig-cap option to add a caption to it:\n```{r}\n#| fig-cap: \"Popularity of polar bears over time\"\ndf_polar_bears |&gt;\n  ggplot(aes(x = year, y = popularity)) +\n  geom_line()\n```\nSee the Quarto documentation for the comprehensive list of chunk options. FYI, I have used Quarto and its predecessor R Markdown for a decade and have never used 90% of these, so don’t worry about trying to figure them all out.\n\n\n1.3.4 Rendering\nWhen you’re done writing your Quarto file and want to turn it into a PDF, hit the “Render” button in the RStudio interface. Assuming that there aren’t any errors in your R code chunks that prevent the document from compiling, you’ll see the PDF output in RStudio’s Preview window (or perhaps in an external browser or PDF viewer, depending on RStudio’s settings).\nBut you really shouldn’t wait until you’re all done to render. As you write, you should regularly take a look at the rendered output to make sure there are no errors and that it looks how you expect. When I’m writing in Quarto (including these notes), at a minimum I re-render and check the output every time I finish writing a paragraph of text or a full code block. Even more aggressively, you can check the “Render on Save” box to automatically render the document every time you save.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "data_sources.html",
    "href": "data_sources.html",
    "title": "Appendix A — Data Sources",
    "section": "",
    "text": "A.1 US voter turnout 1980–2022: turnout.csv\nThis file uses data from the University of Florida Election Lab, specifically version 1.2 of the General Election Turnout Rates dataset.\nObtain the raw data:\n# Download raw data\nturnout_url &lt;- \"https://election.lab.ufl.edu/data-downloads/turnoutdata/Turnout_1980_2022_v1.2.csv\"\nturnout_file &lt;- \"_raw/Turnout_1980_2022_v1.2.csv\"\nif (!file.exists(turnout_file))\n  download.file(url = turnout_url, destfile = turnout_file)\n\n# Read in raw data\ndf_turnout_raw &lt;- read_csv(turnout_file)\n\nglimpse(df_turnout_raw)\n\nRows: 1,144\nColumns: 15\n$ YEAR                    &lt;dbl&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022…\n$ STATE                   &lt;chr&gt; \"United States\", \"Alabama\", \"Alaska\", \"Arizona…\n$ STATE_ABV               &lt;chr&gt; NA, \"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", …\n$ TOTAL_BALLOTS_COUNTED   &lt;dbl&gt; 112030874, 1424087, 267047, 2592313, 914227, 1…\n$ VOTE_FOR_HIGHEST_OFFICE &lt;chr&gt; NA, \"https://www.eac.gov/sites/default/files/2…\n$ VAP                     &lt;dbl&gt; 260725069, 3956111, 556592, 5796801, 2347291, …\n$ NONCITIZEN_PCT          &lt;chr&gt; \"7.50%\", \"2.54%\", \"3.56%\", \"7.78%\", \"3.76%\", \"…\n$ INELIGIBLE_PRISON       &lt;dbl&gt; 1175823, 25403, 4778, 31441, 17331, 97608, 163…\n$ INELIGIBLE_PROBATION    &lt;dbl&gt; 1074600, 27469, 1872, 47515, 28009, 0, 0, 0, 7…\n$ INELIGIBLE_PAROLE       &lt;dbl&gt; 412595, 7815, 865, 7022, 23829, 0, 0, 0, 344, …\n$ INELIGIBLE_FELONS_TOTAL &lt;dbl&gt; 2663018, 60687, 7515, 85978, 69169, 97608, 163…\n$ ELIGIBLE_OVERSEAS       &lt;dbl&gt; 4400000, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ VEP                     &lt;dbl&gt; 242907672, 3794939, 529263, 5259832, 2189865, …\n$ VEP_TURNOUT_RATE        &lt;chr&gt; \"46.12%\", \"37.53%\", \"50.46%\", \"49.29%\", \"41.75…\n$ VAP_TURNOUT_RATE        &lt;chr&gt; \"42.97%\", \"36.00%\", \"47.98%\", \"44.72%\", \"38.95…\nCleaning up into the data file used for class:\ndf_turnout &lt;- df_turnout_raw |&gt;\n  # Only want national level data\n  filter(STATE == \"United States\") |&gt;\n  # Grab and rename the columns we want\n  mutate(\n    year = YEAR,\n    voting_age_pop = VAP,\n    voting_eligible_pop = VEP,\n    ballots_counted = TOTAL_BALLOTS_COUNTED,\n    highest_office = VOTE_FOR_HIGHEST_OFFICE,\n    noncitizen_pct = NONCITIZEN_PCT,\n    ineligible_felons = INELIGIBLE_FELONS_TOTAL,\n    eligible_overseas = ELIGIBLE_OVERSEAS,\n    .keep = \"none\",\n  ) |&gt;\n  # Clean up highest_office and noncitizen_pct columns to be numeric\n  mutate(\n    noncitizen_pct = str_replace(noncitizen_pct, \"\\\\%\", \"\"),\n    noncitizen_pct = as.numeric(noncitizen_pct) / 100,\n    highest_office = str_replace_all(highest_office, \",\", \"\"),\n    highest_office = as.numeric(highest_office),\n  ) |&gt;\n  # Calculate number of noncitizens\n  mutate(\n    ineligible_noncitizens = noncitizen_pct * voting_age_pop,\n  ) |&gt;\n  select(-noncitizen_pct) |&gt;\n  # For vote total, use ballots counted where available, otherwise just use\n  # votes for highest office\n  mutate(\n    votes_counted = if_else(\n      !is.na(ballots_counted),\n      ballots_counted,\n      highest_office\n    )\n  ) |&gt;\n  # Convert population counts to millions\n  mutate(across(-year, \\(x) x / 1e6)) |&gt;\n  # Remove columns no longer needed\n  select(\n    year, votes_counted, voting_age_pop, voting_eligible_pop,\n    ineligible_felons, ineligible_noncitizens, eligible_overseas\n  ) |&gt;\n  # Order from earliest to latest\n  arrange(year)\n\nglimpse(df_turnout)\n\nRows: 22\nColumns: 7\n$ year                   &lt;dbl&gt; 1980, 1982, 1984, 1986, 1988, 1990, 1992, 1994,…\n$ votes_counted          &lt;dbl&gt; 86.51522, 67.61558, 92.65268, 64.99113, 91.5946…\n$ voting_age_pop         &lt;dbl&gt; 164.4455, 166.0276, 173.9946, 177.9223, 181.955…\n$ voting_eligible_pop    &lt;dbl&gt; 159.6909, 160.4088, 167.7085, 170.4089, 173.609…\n$ ineligible_felons      &lt;dbl&gt; 0.801977, 0.959637, 1.165246, 1.367117, 1.59397…\n$ ineligible_noncitizens &lt;dbl&gt; 5.755592, 6.641105, 7.481768, 8.362350, 9.27973…\n$ eligible_overseas      &lt;dbl&gt; 1.803021, 1.981895, 2.360867, 2.216053, 2.52737…\nDouble check that the manually calculated voting eligible calculation lines up with the one reported in the data frame:\ndf_turnout |&gt;\n  mutate(\n    vep_manual = voting_age_pop - ineligible_felons -\n      ineligible_noncitizens + eligible_overseas,\n    vep_difference = abs(voting_eligible_pop - vep_manual) / voting_eligible_pop,\n  ) |&gt;\n  select(year, voting_eligible_pop, vep_manual, vep_difference) |&gt;\n  print(n = Inf)\n\n# A tibble: 22 × 4\n    year voting_eligible_pop vep_manual vep_difference\n   &lt;dbl&gt;               &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;\n 1  1980                160.       160.       2.35e- 9\n 2  1982                160.       160.       1.99e- 9\n 3  1984                168.       168.       1.37e- 9\n 4  1986                170.       170.       2.88e- 9\n 5  1988                174.       174.       1.82e- 9\n 6  1990                177.       177.       1.44e- 9\n 7  1992                180.       180.       2.12e- 9\n 8  1994                183.       183.       2.19e- 9\n 9  1996                186.       186.       1.91e- 9\n10  1998                190.       190.       1.50e- 9\n11  2000                194.       194.       2.14e- 9\n12  2002                198.       198.       4.03e-10\n13  2004                203.       203.       2.18e- 9\n14  2006                207.       207.       1.52e- 9\n15  2008                213.       213.       2.25e- 9\n16  2010                222.       222.       1.94e- 4\n17  2012                222.       222.       2.66e- 9\n18  2014                227.       227.       7.00e-10\n19  2016                231.       231.       7.06e-10\n20  2018                237.       237.       4.22e-10\n21  2020                242.       242.       6.20e-10\n22  2022                243.       243.       4.84e- 9\nSave cleaned data to turnout.csv:\nwrite_csv(df_turnout, \"data/turnout.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data Sources</span>"
    ]
  },
  {
    "objectID": "data_sources.html#international-crises-crises.csv",
    "href": "data_sources.html#international-crises-crises.csv",
    "title": "Appendix A — Data Sources",
    "section": "A.2 International crises: crises.csv",
    "text": "A.2 International crises: crises.csv\nThis file contains the International Crisis Behavior actor-level data, version 16. There’s purposely no additional cleaning since it’s used in the data wrangling lecture.\nThe raw data is stored via a Box link that doesn’t work with download.file(), and my efforts to get ChatGPT to help me get to the underlying data were unsuccessful.\n\n# Read in raw data\ncrises_file &lt;- \"_raw/icb2v16.csv\"\nif (!file.exists(crises_file))\n  stop(\"Need to download data manually from ICB website\")\ndf_crises_raw &lt;- read_csv(crises_file)\n\nglimpse(df_crises_raw)\n\nRows: 1,131\nColumns: 95\n$ icb2     &lt;chr&gt; \"ICB2\", \"ICB2\", \"ICB2\", \"ICB2\", \"ICB2\", \"ICB2\", \"ICB2\", \"ICB2…\n$ crisno   &lt;dbl&gt; 1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 1…\n$ cracno   &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ cracid   &lt;dbl&gt; 365, 93, 94, 365, 365, 366, 368, 367, 315, 290, 310, 315, 310…\n$ actor    &lt;chr&gt; \"RUS\", \"NIC\", \"COS\", \"RUS\", \"RUS\", \"EST\", \"LIT\", \"LAT\", \"CZE\"…\n$ systrgyr &lt;dbl&gt; 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1919, 1919, 1…\n$ systrgmo &lt;dbl&gt; 5, 5, 5, 6, 11, 11, 11, 11, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, …\n$ systrgda &lt;dbl&gt; NA, 25, 25, 23, 18, 18, 18, 18, 15, 15, 20, 20, 20, 20, 66, N…\n$ crisname &lt;chr&gt; \"RUSSIAN CIVIL WAR I\", \"COSTA RICAN COUP\", \"COSTA RICAN COUP\"…\n$ triggr   &lt;dbl&gt; 9, 7, 4, 7, 6, 9, 9, 9, 2, 7, 2, 9, 2, 9, 7, 7, 2, 7, 9, 9, 2…\n$ yrtrig   &lt;dbl&gt; 1918, 1918, 1919, 1918, 1918, 1918, 1918, 1918, 1919, 1919, 1…\n$ motrig   &lt;dbl&gt; 5, 5, 1, 6, 11, 11, 12, 12, 1, 1, 3, 5, 6, 7, 3, 5, 4, 5, 4, …\n$ datrig   &lt;dbl&gt; NA, 25, 25, 23, 18, 22, NA, NA, 15, 23, 20, 11, 8, 20, 66, 15…\n$ trigent  &lt;dbl&gt; 996, 94, 996, 997, 366, 365, 365, 365, 290, 315, 997, 310, 22…\n$ trigloc  &lt;dbl&gt; 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ southv   &lt;dbl&gt; 220, 94, 93, 200, 366, 365, 365, 365, 290, 315, 360, 310, 220…\n$ southpow &lt;dbl&gt; 3, 1, 1, 3, 1, 3, 3, 3, 2, 1, 1, 1, 3, 1, 3, 2, 3, 1, 1, 3, 1…\n$ sizedu   &lt;dbl&gt; 1, NA, NA, 1, 1, NA, NA, NA, NA, NA, 3, 3, 3, NA, 3, NA, NA, …\n$ strcdu   &lt;dbl&gt; 1, 1, NA, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, NA, 1, NA, 1, 1, NA, …\n$ comlev   &lt;dbl&gt; 7, 1, 1, 7, 8, 8, 8, 8, 3, 3, 1, NA, 1, NA, NA, 3, 1, 2, 3, 3…\n$ majres   &lt;dbl&gt; 8, 3, 6, 8, 8, 9, 9, 9, 8, 8, 8, 8, 1, 8, 6, 8, 8, 8, 8, 8, 8…\n$ yerres   &lt;dbl&gt; 1918, 1918, 1919, 1918, 1918, 1918, 1918, 1918, 1919, 1919, 1…\n$ monres   &lt;dbl&gt; 5, 5, 1, 7, 11, 11, 12, 12, 1, 1, 3, 5, 6, 7, 5, 5, 5, 5, 6, …\n$ dayres   &lt;dbl&gt; 28, 30, 28, 1, 22, 22, NA, NA, 23, 23, 28, 11, 16, 24, 15, NA…\n$ trgresra &lt;dbl&gt; 14, 6, 4, 9, 5, 1, NA, NA, 9, 1, 9, 1, 9, 5, 76, NA, 19, 6, 4…\n$ crismg   &lt;dbl&gt; 8, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 7, 7, 7, 7, 7, 7, 7…\n$ cenvio   &lt;dbl&gt; 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 2, 3, 3, 3, 3, 3, 3…\n$ sevvio   &lt;dbl&gt; 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 4, 4, 1, 4, 2, 2, 4, 4, 3, 3, 3…\n$ usinv    &lt;dbl&gt; 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1…\n$ usfavr   &lt;dbl&gt; 3, 1, 3, 3, 3, 1, 1, 1, 3, 3, 5, 5, 5, 5, 1, 3, 5, 5, NA, 3, …\n$ suinv    &lt;dbl&gt; 9, 1, 1, 9, 9, 8, 8, 8, 1, 1, 3, 3, 1, 3, 1, 1, 5, 5, 9, 8, 9…\n$ sufavr   &lt;dbl&gt; 8, 5, 5, 8, 8, 3, 3, 3, 5, 5, 1, 3, 5, 3, 5, 5, 2, 2, 8, 3, 8…\n$ gbinv    &lt;dbl&gt; 7, 1, 1, 8, 3, 6, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 8, 9, 7, 7, 1…\n$ gbfavr   &lt;dbl&gt; NA, 5, 5, NA, NA, NA, NA, NA, 3, 3, NA, NA, NA, NA, 1, NA, 3,…\n$ frinv    &lt;dbl&gt; 2, 1, 1, 8, 3, 1, 3, 3, 3, 3, 8, 8, 3, 1, 3, 3, 1, 1, 3, 3, 1…\n$ frfavr   &lt;dbl&gt; NA, 5, 5, NA, NA, NA, NA, NA, 3, 3, NA, NA, NA, NA, 1, NA, 5,…\n$ itinv    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 7, 7, 1, 1, 8, 9, 1, 1, 1, 1, 1…\n$ itfavr   &lt;dbl&gt; NA, 5, 5, NA, NA, NA, NA, NA, 3, 3, NA, NA, NA, NA, 3, NA, 5,…\n$ grinv    &lt;dbl&gt; 1, 1, 1, 1, 8, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1…\n$ grfavr   &lt;dbl&gt; NA, 5, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 5, NA, …\n$ jpinv    &lt;dbl&gt; 7, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ jpfavr   &lt;dbl&gt; NA, 5, 5, NA, NA, NA, NA, NA, 3, 3, NA, NA, NA, NA, 5, NA, 5,…\n$ globorg  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2…\n$ globact  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2…\n$ globfavr &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, NA, …\n$ regorg   &lt;dbl&gt; 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ regact   &lt;dbl&gt; 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ rofavr   &lt;dbl&gt; 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ outcom   &lt;dbl&gt; 1, 1, 4, 1, 4, 1, 1, 1, 2, 2, 4, 1, 4, 1, 2, 2, 2, 2, 2, 2, 4…\n$ outfor   &lt;dbl&gt; 6, 4, 4, 6, 9, 8, 8, 8, 9, 9, 6, 1, 7, 4, 1, 1, 1, 1, 1, 1, 1…\n$ outevl   &lt;dbl&gt; 2, 2, 3, 2, 3, 2, 2, 2, 4, 4, 3, 2, 3, 2, 1, 1, 1, 1, 1, 3, 3…\n$ outesr   &lt;dbl&gt; 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2…\n$ yrterm   &lt;dbl&gt; 1920, 1918, 1919, 1919, 1920, 1920, 1920, 1920, 1920, 1920, 1…\n$ moterm   &lt;dbl&gt; 4, 12, 9, 9, 8, 2, 7, 8, 7, 7, 8, 6, 6, 8, 7, 7, 8, 8, 10, 10…\n$ daterm   &lt;dbl&gt; 1, 15, 3, 27, 11, 2, 12, 11, 28, 28, 3, 24, 16, 3, 29, 29, 8,…\n$ trgterra &lt;dbl&gt; 686, 205, 222, 462, 632, 438, 574, 603, 560, 552, 137, 45, 9,…\n$ resterra &lt;dbl&gt; 673, 199, 218, 453, 627, 438, 574, 603, 551, 552, 128, 45, 1,…\n$ actloc   &lt;dbl&gt; 30, 42, 42, 30, 30, 34, 34, 34, 31, 31, 31, 31, 31, 31, 35, 3…\n$ geog     &lt;dbl&gt; 30, 42, 42, 30, 34, 34, 34, 34, 31, 31, 31, 31, 31, 31, 10, 1…\n$ cractloc &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 3, 2, 4, 1, 1, 1, 1, 1…\n$ noactr   &lt;dbl&gt; 7, 5, 6, 5, 8, 8, 8, 8, 3, 3, 7, 7, 3, 7, 5, 5, 3, 3, 5, 6, 3…\n$ stainsys &lt;dbl&gt; 47, 47, 49, 47, 47, 47, 47, 47, 49, 49, 49, 49, 49, 49, 49, 4…\n$ period   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ syslev   &lt;dbl&gt; 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ pc       &lt;dbl&gt; 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1…\n$ pcid     &lt;dbl&gt; 27, 6, 6, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 1…\n$ viol     &lt;dbl&gt; 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 1, 4, 2, 2, 4, 4, 3, 3, 3…\n$ iwc      &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 7, 1, 1, 1, 1, 1, 1, 1…\n$ powdis   &lt;dbl&gt; NA, 1, -1, NA, 12, -12, -12, -12, -1, 1, NA, NA, NA, NA, -1, …\n$ gpinv    &lt;dbl&gt; 7, 4, 4, 7, 7, 7, 7, 7, 3, 3, 5, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7…\n$ powinv   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ age      &lt;dbl&gt; 1, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 3, 1…\n$ territ   &lt;dbl&gt; 3, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 2, 3…\n$ regime   &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 1, 4, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2…\n$ durreg   &lt;dbl&gt; 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 3, 3, 1, 1, 1…\n$ allycap  &lt;dbl&gt; 4, 2, 1, 4, 4, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 4, 4, 2, 4…\n$ globmemb &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4…\n$ nuclear  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ powsta   &lt;dbl&gt; 3, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 3, 1, 3, 3, 1, 3…\n$ issue    &lt;dbl&gt; 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1…\n$ chissu   &lt;dbl&gt; 4, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6…\n$ gravty   &lt;dbl&gt; 2, 1, 2, 2, 3, 6, 6, 6, 3, 3, 6, 3, 5, 3, 3, 4, 2, 4, 3, 3, 3…\n$ pethin   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0…\n$ col      &lt;dbl&gt; 1, NA, NA, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, 1, NA, 1, 1,…\n$ unemp    &lt;dbl&gt; NA, NA, NA, NA, NA, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, NA, NA, 3…\n$ inflat   &lt;dbl&gt; 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, 1, NA, NA, 1, …\n$ foodpr   &lt;dbl&gt; 1, NA, NA, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, 1, NA, 1, 1,…\n$ labstr   &lt;dbl&gt; 1, NA, NA, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, 1, NA, 1, 1,…\n$ short    &lt;dbl&gt; 1, NA, NA, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, 2, NA, 1, 1,…\n$ econdt   &lt;dbl&gt; 1, NA, NA, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, 1, NA, 1, 1,…\n$ regrep   &lt;dbl&gt; NA, 1, 1, NA, NA, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, NA, 1, 1, 1…\n$ socunr   &lt;dbl&gt; 1, NA, NA, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, NA, 1, 1, 1,…\n$ massvl   &lt;dbl&gt; 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, 2, NA, 2, 1, 1…\n$ gvinst   &lt;dbl&gt; 1, 2, NA, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, NA, NA, NA, NA, 2, 1,…\n$ sourdt   &lt;dbl&gt; 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, NA, 3, 1, 1, 1, 1, …\n\n\nSave to crises.csv:\n\nwrite_csv(df_crises_raw, \"data/crises.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data Sources</span>"
    ]
  },
  {
    "objectID": "data_sources.html#military-spending-and-personnel-military.csv",
    "href": "data_sources.html#military-spending-and-personnel-military.csv",
    "title": "Appendix A — Data Sources",
    "section": "A.3 Military spending and personnel: military.csv",
    "text": "A.3 Military spending and personnel: military.csv\nThis file contains data from the Correlates of War project’s dataset on National Material Capabilities, version 6.0.\nObtain the raw data by extracting from the zip on the COW website:\n\n# Download zip file containing raw data\n#\n# This is convoluted because the csv is inside a zip within the zip\nmilitary_url &lt;- \"https://correlatesofwar.org/wp-content/uploads/NMC_Documentation-6.0.zip\"\nmilitary_file &lt;- \"_raw/NMC-60-abridged.csv\"\nif (!file.exists(military_file)) {\n  military_zip_outer &lt;- tempfile(fileext = \".zip\")\n  download.file(url = military_url, destfile = military_zip_outer)\n  military_zip_inner &lt;- archive_read(military_zip_outer, \"NMC-60-abridged.zip\")\n  military_csv &lt;- read_csv(archive_read(military_zip_inner, \"NMC-60-abridged.csv\"))\n  write_csv(military_csv, military_file)\n}\n\n# Read in raw data\ndf_military_raw &lt;- read_csv(military_file)\n\nglimpse(df_military_raw)\n\nRows: 15,951\nColumns: 11\n$ stateabb &lt;chr&gt; \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\"…\n$ ccode    &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ year     &lt;dbl&gt; 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1…\n$ milex    &lt;dbl&gt; 3823, 2466, 1910, 2301, 1556, 1612, 1079, 1170, 1261, 1336, 1…\n$ milper   &lt;dbl&gt; 17, 15, 14, 13, 15, 11, 10, 11, 11, 11, 12, 12, 11, 12, 12, 1…\n$ irst     &lt;dbl&gt; 80, 80, 90, 90, 110, 100, 100, 110, 110, 120, 120, 130, 130, …\n$ pec      &lt;dbl&gt; 254, 277, 302, 293, 303, 321, 332, 345, 390, 424, 502, 556, 6…\n$ tpop     &lt;dbl&gt; 8659, 8899, 9139, 9379, 9618, 9939, 10268, 10596, 10924, 1125…\n$ upop     &lt;dbl&gt; 101, 106, 112, 118, 124, 130, 136, 143, 151, 158, 166, 175, 1…\n$ cinc     &lt;dbl&gt; 0.03969749, 0.03581661, 0.03612655, 0.03713325, 0.03708687, 0…\n$ version  &lt;dbl&gt; 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2…\n\n\nConvert to “long” format containing only spending and personnel, for pedagogical purposes:\n\ndf_military &lt;- df_military_raw |&gt;\n  select(ccode, stateabb, year, spending = milex, personnel = milper) |&gt;\n  pivot_longer(\n    cols = c(spending, personnel),\n    names_to = \"mil_indicator\",\n    values_to = \"amount\"\n  )\n\nglimpse(df_military)\n\nRows: 31,902\nColumns: 5\n$ ccode         &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ stateabb      &lt;chr&gt; \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", …\n$ year          &lt;dbl&gt; 1816, 1816, 1817, 1817, 1818, 1818, 1819, 1819, 1820, 18…\n$ mil_indicator &lt;chr&gt; \"spending\", \"personnel\", \"spending\", \"personnel\", \"spend…\n$ amount        &lt;dbl&gt; 3823, 17, 2466, 15, 1910, 14, 2301, 13, 1556, 15, 1612, …\n\n\nSave to military.csv:\n\nwrite_csv(df_military, \"data/military.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data Sources</span>"
    ]
  },
  {
    "objectID": "data_sources.html#county-level-presidential-election-returns-20002024-county_pres.csv",
    "href": "data_sources.html#county-level-presidential-election-returns-20002024-county_pres.csv",
    "title": "Appendix A — Data Sources",
    "section": "A.4 County-level presidential election returns, 2000–2024: county_pres.csv",
    "text": "A.4 County-level presidential election returns, 2000–2024: county_pres.csv\nThis file contains data from the MIT Election Lab dataset on County Presidential Election returns.\nObtain raw data from Harvard Dataverse:\n\n# Download raw data from Harvard Dataverse repository\ncounty_pres_file &lt;- \"_raw/countypres_2000-2024.csv\"\nif (!file.exists(county_pres_file)) {\n  df_county_pres_dataverse &lt;- get_dataframe_by_name(\n    filename = \"countypres_2000-2024.tab\",\n    dataset = \"10.7910/DVN/VOQCHQ\",\n    server = \"dataverse.harvard.edu\",\n    version = \"15.0\"\n  )\n  write_csv(df_county_pres_dataverse, county_pres_file)\n}\n\ndf_county_pres_raw &lt;- read_csv(county_pres_file)\n\nglimpse(df_county_pres_raw)\n\nRows: 94,409\nColumns: 12\n$ year           &lt;dbl&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2…\n$ state          &lt;chr&gt; \"ALABAMA\", \"ALABAMA\", \"ALABAMA\", \"ALABAMA\", \"ALABAMA\", …\n$ state_po       &lt;chr&gt; \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"…\n$ county_name    &lt;chr&gt; \"AUTAUGA\", \"AUTAUGA\", \"AUTAUGA\", \"AUTAUGA\", \"BALDWIN\", …\n$ county_fips    &lt;chr&gt; \"01001\", \"01001\", \"01001\", \"01001\", \"01003\", \"01003\", \"…\n$ office         &lt;chr&gt; \"US PRESIDENT\", \"US PRESIDENT\", \"US PRESIDENT\", \"US PRE…\n$ candidate      &lt;chr&gt; \"AL GORE\", \"GEORGE W. BUSH\", \"OTHER\", \"RALPH NADER\", \"A…\n$ party          &lt;chr&gt; \"DEMOCRAT\", \"REPUBLICAN\", \"OTHER\", \"GREEN\", \"DEMOCRAT\",…\n$ candidatevotes &lt;dbl&gt; 4942, 11993, 113, 160, 13997, 40872, 578, 1033, 5188, 5…\n$ totalvotes     &lt;dbl&gt; 17208, 17208, 17208, 17208, 56480, 56480, 56480, 56480,…\n$ version        &lt;dbl&gt; 20250712, 20250712, 20250712, 20250712, 20250712, 20250…\n$ mode           &lt;chr&gt; \"TOTAL\", \"TOTAL\", \"TOTAL\", \"TOTAL\", \"TOTAL\", \"TOTAL\", \"…\n\n\nClean data to have one row per county-year:\n\ndf_county_pres &lt;- df_county_pres_raw |&gt;\n  rename(county = county_name) |&gt;\n  group_by(year, state, county) |&gt;\n  summarize(\n    county_fips = first(county_fips),\n    total_votes = first(totalvotes),\n    dem_votes = sum(candidatevotes[party == \"DEMOCRAT\"]),\n    rep_votes = sum(candidatevotes[party == \"REPUBLICAN\"]),\n    .groups = \"drop\"\n  ) |&gt;\n  mutate(\n    census_region = fct_collapse(\n      state,\n      Northeast = c(\n        \"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\",\n        \"VERMONT\", \"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"\n      ),\n      Midwest = c(\n        \"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\", \"IOWA\", \"KANSAS\",\n        \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"\n      ),\n      South = c(\n        \"DELAWARE\", \"DISTRICT OF COLUMBIA\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\",\n        \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"WEST VIRGINIA\", \"ALABAMA\",\n        \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\", \"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\",\n        \"TEXAS\"\n      ),\n      West = c(\n        \"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\",\n        \"WYOMING\", \"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"\n      ),\n      other_level = \"Unknown\"\n    ),\n    margin = dem_votes - rep_votes,\n    pct_margin = margin / total_votes,\n    competitiveness = case_when(\n      pct_margin &lt; -0.2 ~ -3,\n      pct_margin &lt; -0.1 ~ -2,\n      pct_margin &lt; -0.04 ~ -1,\n      pct_margin &lt; 0.04 ~ 0,\n      pct_margin &lt; 0.1 ~ 1,\n      pct_margin &lt; 0.2 ~ 2,\n      TRUE ~ 3\n    ),\n  ) |&gt;\n  group_by(state) |&gt;\n  mutate(\n    dem_win_state = as.numeric(sum(dem_votes) &gt; sum(rep_votes)),\n  ) |&gt;\n  ungroup()\n\nSave to county_pres.csv:\n\nwrite_csv(df_county_pres, \"data/county_pres.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data Sources</span>"
    ]
  },
  {
    "objectID": "data_sources.html#world-development-indicators-2019-wdi.csv",
    "href": "data_sources.html#world-development-indicators-2019-wdi.csv",
    "title": "Appendix A — Data Sources",
    "section": "A.5 World Development Indicators, 2019: wdi.csv",
    "text": "A.5 World Development Indicators, 2019: wdi.csv\nThis file contains data from the World Bank’s World Development Indicators dataset.\nObtain raw data using the WDI package:\n\n# Download raw data via WDI package\nwdi_file &lt;- \"_raw/wdi_2019.csv\"\nif (!file.exists(wdi_file)) {\n  df_wdi_pkg &lt;- WDI(\n    country = \"all\",\n    indicator = c(\n      \"gdp_per_capita\" = \"NY.GDP.PCAP.CD\",\n      \"gdp_growth\" = \"NY.GDP.MKTP.KD.ZG\",\n      \"population\" = \"SP.POP.TOTL\",\n      \"inflation\" = \"FP.CPI.TOTL.ZG\",\n      \"unemployment\" = \"SL.UEM.TOTL.ZS\",\n      \"life_expectancy\" = \"SP.DYN.LE00.IN\"\n    ),\n    start = 2019, end = 2019,\n    extra = TRUE\n  )\n  write_csv(df_wdi_pkg, wdi_file)\n}\n\ndf_wdi_raw &lt;- read_csv(wdi_file)\n\nglimpse(df_wdi_raw)\n\nRows: 266\nColumns: 18\n$ country         &lt;chr&gt; \"Afghanistan\", \"Africa Eastern and Southern\", \"Africa …\n$ iso2c           &lt;chr&gt; \"AF\", \"ZH\", \"ZI\", \"AL\", \"DZ\", \"AS\", \"AD\", \"AO\", \"AG\", …\n$ iso3c           &lt;chr&gt; \"AFG\", \"AFE\", \"AFW\", \"ALB\", \"DZA\", \"ASM\", \"AND\", \"AGO\"…\n$ year            &lt;dbl&gt; 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, …\n$ status          &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ lastupdated     &lt;date&gt; 2025-07-01, 2025-07-01, 2025-07-01, 2025-07-01, 2025-…\n$ gdp_per_capita  &lt;dbl&gt; 496.6025, 1493.8179, 1798.3407, 5460.4305, 4468.4534, …\n$ gdp_growth      &lt;dbl&gt; 3.9116034, 2.2003404, 3.2821630, 2.0625779, 0.9000000,…\n$ population      &lt;dbl&gt; 37856121, 675950189, 463365429, 2854191, 43294546, 502…\n$ inflation       &lt;dbl&gt; 2.3023725, 4.6449672, 1.9830923, 1.4110908, 1.9517682,…\n$ unemployment    &lt;dbl&gt; 11.185000, 7.584419, 4.395271, 11.466000, 12.259000, N…\n$ life_expectancy &lt;dbl&gt; 62.94100, 63.85726, 57.14985, 79.46700, 75.68200, 72.7…\n$ region          &lt;chr&gt; \"South Asia\", \"Aggregates\", \"Aggregates\", \"Europe & Ce…\n$ capital         &lt;chr&gt; \"Kabul\", NA, NA, \"Tirane\", \"Algiers\", \"Pago Pago\", \"An…\n$ longitude       &lt;dbl&gt; 69.17610, NA, NA, 19.81720, 3.05097, -170.69100, 1.521…\n$ latitude        &lt;dbl&gt; 34.52280, NA, NA, 41.33170, 36.73970, -14.28460, 42.50…\n$ income          &lt;chr&gt; \"Low income\", \"Aggregates\", \"Aggregates\", \"Upper middl…\n$ lending         &lt;chr&gt; \"IDA\", \"Aggregates\", \"Aggregates\", \"IBRD\", \"IBRD\", \"No…\n\n\nMinor cleaning to remove unwanted rows and columns:\n\ndf_wdi &lt;- df_wdi_raw |&gt;\n  as_tibble() |&gt;\n  select(-iso2c, -status, -lastupdated, -capital, -longitude, -latitude) |&gt;\n  filter(region != \"Aggregates\") |&gt;\n  filter(income != \"Not classified\")\n\nglimpse(df_wdi)\n\nRows: 215\nColumns: 12\n$ country         &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"American Samoa\",…\n$ iso3c           &lt;chr&gt; \"AFG\", \"ALB\", \"DZA\", \"ASM\", \"AND\", \"AGO\", \"ATG\", \"ARG\"…\n$ year            &lt;dbl&gt; 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, …\n$ gdp_per_capita  &lt;dbl&gt; 496.6025, 5460.4305, 4468.4534, 12886.1360, 41257.8046…\n$ gdp_growth      &lt;dbl&gt; 3.9116034, 2.0625779, 0.9000000, -0.4878049, 2.0155476…\n$ population      &lt;dbl&gt; 37856121, 2854191, 43294546, 50209, 76474, 32375632, 9…\n$ inflation       &lt;dbl&gt; 2.3023725, 1.4110908, 1.9517682, NA, NA, 17.0809541, 1…\n$ unemployment    &lt;dbl&gt; 11.185, 11.466, 12.259, NA, NA, 16.497, NA, 9.843, 18.…\n$ life_expectancy &lt;dbl&gt; 62.94100, 79.46700, 75.68200, 72.75100, 84.09800, 63.0…\n$ region          &lt;chr&gt; \"South Asia\", \"Europe & Central Asia\", \"Middle East & …\n$ income          &lt;chr&gt; \"Low income\", \"Upper middle income\", \"Upper middle inc…\n$ lending         &lt;chr&gt; \"IDA\", \"IBRD\", \"IBRD\", \"Not classified\", \"Not classifi…\n\n\nSave to wdi.csv:\n\nwrite_csv(df_wdi, \"data/wdi.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data Sources</span>"
    ]
  },
  {
    "objectID": "data_sources.html#subset-of-2020-anes-survey-anes_2020.csv",
    "href": "data_sources.html#subset-of-2020-anes-survey-anes_2020.csv",
    "title": "Appendix A — Data Sources",
    "section": "A.6 Subset of 2020 ANES survey: anes_2020.csv",
    "text": "A.6 Subset of 2020 ANES survey: anes_2020.csv\nThis file contains a small number of variables from the 2020 wave of the American National Election Studies Time Series Study.\nDespite the direct download link on ANES’s website, they’ve got it locked down to prevent programmatic access from utilities like download.file(). (Not running glimpse() this time because the data has 1700+ columns.)\n\nanes_file &lt;- \"_raw/anes_timeseries_2020_csv_20220210.csv\"\nif (!file.exists(anes_file))\n  stop(\"Need to download data manually from ANES website\")\n\ndf_anes_raw &lt;- read_csv(anes_file)\n\nExtract the few columns we care about and convert numeric codes to understandable values:\n\ndf_anes &lt;- df_anes_raw |&gt;\n  mutate(\n    id = row_number(),\n    state = case_match(\n      V201014b,\n      1 ~ \"Alabama\",\n      2 ~ \"Alaska\",\n      4 ~ \"Arizona\",\n      5 ~ \"Arkansas\",\n      6 ~ \"California\",\n      8 ~ \"Colorado\",\n      9 ~ \"Connecticut\",\n      10 ~ \"Delaware\",\n      11 ~ \"District of Columbia\",\n      12 ~ \"Florida\",\n      13 ~ \"Georgia\",\n      15 ~ \"Hawaii\",\n      16 ~ \"Idaho\",\n      17 ~ \"Illinois\",\n      18 ~ \"Indiana\",\n      19 ~ \"Iowa\",\n      20 ~ \"Kansas\",\n      21 ~ \"Kentucky\",\n      22 ~ \"Louisiana\",\n      23 ~ \"Maine\",\n      24 ~ \"Maryland\",\n      25 ~ \"Massachusetts\",\n      26 ~ \"Michigan\",\n      27 ~ \"Minnesota\",\n      28 ~ \"Mississippi\",\n      29 ~ \"Missouri\",\n      30 ~ \"Montana\",\n      31 ~ \"Nebraska\",\n      32 ~ \"Nevada\",\n      33 ~ \"New Hampshire\",\n      34 ~ \"New Jersey\",\n      35 ~ \"New Mexico\",\n      36 ~ \"New York\",\n      37 ~ \"North Carolina\",\n      38 ~ \"North Dakota\",\n      39 ~ \"Ohio\",\n      40 ~ \"Oklahoma\",\n      41 ~ \"Oregon\",\n      42 ~ \"Pennsylvania\",\n      44 ~ \"Rhode Island\",\n      45 ~ \"South Carolina\",\n      46 ~ \"South Dakota\",\n      47 ~ \"Tennessee\",\n      48 ~ \"Texas\",\n      49 ~ \"Utah\",\n      50 ~ \"Vermont\",\n      51 ~ \"Virginia\",\n      53 ~ \"Washington\",\n      54 ~ \"West Virginia\",\n      55 ~ \"Wisconsin\",\n      56 ~ \"Wyoming\"\n    ),\n    female = case_match(\n      V201600,\n      1 ~ 0,\n      2 ~ 1\n    ),\n    lgbt = case_match(\n      V201601,\n      1 ~ 0,\n      2:4 ~ 1\n    ),\n    race = case_match(\n      V201549x,\n      1 ~ \"White\",\n      2 ~ \"Black\",\n      3 ~ \"Hispanic\",\n      4 ~ \"Asian\",\n      5 ~ \"Native American\",\n      6 ~ \"Multiracial\"\n    ),\n    age = if_else(V201507x &gt; 0, V201507x, NA),\n    education = case_match(\n      V201511x,\n      1 ~ \"Less than high school\",\n      2 ~ \"High school\",\n      3 ~ \"Some college\",\n      4 ~ \"Bachelor's degree\",\n      5 ~ \"Graduate degree\"\n    ),\n    employed = case_match(\n      V201517,\n      1 ~ 1,\n      2 ~ 0\n    ),\n    hours_worked = case_when(\n      V201527 == -1 ~ 0,\n      V201527 &gt; 0 ~ V201527,\n      TRUE ~ NA\n    ),\n    watch_tucker = case_match(\n      V201630c,\n      c(-1, 0) ~ 0,\n      1 ~ 1\n    ),\n    watch_maddow = case_match(\n      V201630d,\n      c(-1, 0) ~ 0,\n      1 ~ 1\n    ),\n    therm_biden = if_else(V201151 %in% 0:100, V201151, NA),\n    therm_trump = if_else(V201152 %in% 0:100, V201152, NA),\n    therm_harris = if_else(V201153 %in% 0:100, V201153, NA),\n    therm_pence = if_else(V201154 %in% 0:100, V201154, NA),\n    therm_obama = if_else(V201155 %in% 0:100, V201155, NA),\n    therm_dem_party = if_else(V201156 %in% 0:100, V201156, NA),\n    therm_rep_party = if_else(V201157 %in% 0:100, V201157, NA),\n    therm_feminists = if_else(V202160 %in% 0:100, V202160, NA),\n    therm_liberals = if_else(V202161 %in% 0:100, V202161, NA),\n    therm_labor_unions = if_else(V202162 %in% 0:100, V202162, NA),\n    therm_big_business = if_else(V202163 %in% 0:100, V202163, NA),\n    therm_conservatives = if_else(V202164 %in% 0:100, V202164, NA),\n    therm_supreme_court = if_else(V202165 %in% 0:100, V202165, NA),\n    therm_congress = if_else(V202167 %in% 0:100, V202167, NA),\n    therm_police = if_else(V202171 %in% 0:100, V202171, NA),\n    therm_scientists = if_else(V202173 %in% 0:100, V202173, NA),\n    contributed_to_party = case_match(\n      V202019,\n      1 ~ 1,\n      2 ~ 0\n    ),\n    voted = case_match(\n      V202068x,\n      0:1 ~ 0,\n      2 ~ 1\n    ),\n    voted_for_biden = if_else(V202073 &lt; 0, NA, V202073),\n    voted_for_biden = case_match(\n      voted_for_biden,\n      1 ~ 1,\n      2:8 ~ 0\n    ),\n    voted_for_trump = if_else(V202073 &lt; 0, NA, V202073),\n    voted_for_trump = case_match(\n      voted_for_trump,\n      2 ~ 1,\n      c(1, 3:8) ~ 0\n    ),\n    .keep = \"none\"\n  )\n\nglimpse(df_anes)\n\nRows: 8,280\nColumns: 31\n$ id                   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ state                &lt;chr&gt; \"Oklahoma\", \"Idaho\", \"Virginia\", \"California\", \"C…\n$ female               &lt;dbl&gt; 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0…\n$ lgbt                 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ race                 &lt;chr&gt; \"Hispanic\", \"Asian\", \"White\", \"Asian\", \"Native Am…\n$ age                  &lt;dbl&gt; 46, 37, 40, 41, 72, 71, 37, 45, 70, 43, 37, 55, 3…\n$ education            &lt;chr&gt; \"Bachelor's degree\", \"Some college\", \"High school…\n$ employed             &lt;dbl&gt; 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1…\n$ hours_worked         &lt;dbl&gt; 40, 40, 0, 40, 0, 0, 30, 40, 0, 30, 25, 50, 0, 50…\n$ watch_tucker         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ watch_maddow         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ therm_biden          &lt;dbl&gt; 0, 0, 65, 70, 15, 85, 50, 50, 85, 85, 100, 60, 0,…\n$ therm_trump          &lt;dbl&gt; 100, 0, 0, 15, 85, 0, 75, 100, 0, 0, 0, 0, 100, 0…\n$ therm_harris         &lt;dbl&gt; 0, 0, 65, 85, 15, 85, 15, 50, 85, 50, 100, 85, 0,…\n$ therm_pence          &lt;dbl&gt; 85, 0, 0, 15, 90, 0, 75, 50, 0, 50, 0, 50, 0, 0, …\n$ therm_obama          &lt;dbl&gt; 0, 50, 90, 85, 10, 60, 15, 50, 60, 100, 100, 85, …\n$ therm_dem_party      &lt;dbl&gt; 0, 0, 60, 50, 20, 85, 15, 50, NA, 60, 100, 50, 0,…\n$ therm_rep_party      &lt;dbl&gt; 85, 50, 0, 70, 70, 15, 75, 100, NA, 50, 0, 30, 85…\n$ therm_feminists      &lt;dbl&gt; 65, 100, 75, 70, 30, 60, 60, 100, 50, 50, 0, 70, …\n$ therm_liberals       &lt;dbl&gt; 30, 0, 75, 70, 10, 70, 0, NA, 30, 50, 50, 70, 0, …\n$ therm_labor_unions   &lt;dbl&gt; 30, 70, 75, 70, 50, 50, 50, 0, 30, 50, 50, 50, 50…\n$ therm_big_business   &lt;dbl&gt; 70, 50, 0, 85, 0, 40, 50, 0, 50, 15, 50, 60, 0, 0…\n$ therm_conservatives  &lt;dbl&gt; 85, 15, 0, 70, 60, 40, 60, NA, 50, 50, 50, 40, 85…\n$ therm_supreme_court  &lt;dbl&gt; 100, 50, 25, 85, 60, 60, 70, 50, 50, 50, 40, 50, …\n$ therm_congress       &lt;dbl&gt; 40, 15, 0, 100, 10, 85, 50, 50, 50, 40, 50, 50, 0…\n$ therm_police         &lt;dbl&gt; 85, 90, 40, 100, 70, 70, 60, 100, 60, 70, 50, 70,…\n$ therm_scientists     &lt;dbl&gt; 100, 70, 100, 85, 60, 85, 85, NA, 60, 50, 85, 100…\n$ contributed_to_party &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ voted                &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1…\n$ voted_for_biden      &lt;dbl&gt; NA, 0, 1, 1, 0, 1, 0, NA, NA, 1, 1, 1, 0, NA, NA,…\n$ voted_for_trump      &lt;dbl&gt; NA, 0, 0, 0, 1, 0, 1, NA, NA, 0, 0, 0, 1, NA, NA,…\n\n\nSave to anes_2020.csv:\n\nwrite_csv(df_anes, \"data/anes_2020.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data Sources</span>"
    ]
  },
  {
    "objectID": "data_sources.html#federalist-papers-corpus-fed_papers.csv",
    "href": "data_sources.html#federalist-papers-corpus-fed_papers.csv",
    "title": "Appendix A — Data Sources",
    "section": "A.7 Federalist Papers corpus: fed_papers.csv",
    "text": "A.7 Federalist Papers corpus: fed_papers.csv\nThis file contains the full text of each of the Federalist Papers, per the public domain text archived by Project Gutenberg.\nObtain the raw text from Project Gutenberg:\n\nfed_papers_url &lt;- \"https://www.gutenberg.org/files/18/18-0.txt\"\nfed_papers_file &lt;- \"_raw/fed_papers.txt\"\n\nif (!file.exists(fed_papers_file))\n  download.file(url = fed_papers_url, destfile = fed_papers_file)\n\nfed_papers_raw &lt;- readLines(fed_papers_file)\n\nParse text and assemble into data frame:\n\n## Eliminate table of contents and other non-text content\nfed_papers &lt;- fed_papers_raw |&gt;\n  tail(-98) |&gt;\n  head(-2)\n\n## Combine into single string\nfed_papers &lt;- str_c(fed_papers, collapse = \"\\n\")\n\n## Split into individual papers\nfed_papers &lt;- fed_papers |&gt;\n  str_split(\"THE FEDERALIST.\\n\") |&gt;\n  unlist()\n\n## Eliminate the empty first entry, as well as the duplicate of #70\nfed_papers &lt;- fed_papers[-1]\nfed_papers &lt;- fed_papers[-70]\n\n## Extract author(s) of each paper\nauthor_id_regex &lt;- \"\\\\n\\\\n(HAMILTON|JAY|MADISON|HAMILTON AND MADISON|HAMILTON OR MADISON)\\\\n\\\\n\\\\n\"\npaper_author &lt;- fed_papers |&gt;\n  str_extract(author_id_regex) |&gt;\n  str_remove_all(\"\\\\n\") |&gt;\n  str_to_lower()\n\n## Start each paper text after author identifier\n##\n## This will keep our classifiers from \"peeking\" by directly using author info\npaper_text &lt;- fed_papers |&gt;\n  str_split_i(author_id_regex, i = 2)\n\n## Combine into a data frame\ndf_fed_papers &lt;- tibble(\n  paper_id = seq_along(fed_papers),\n  author = paper_author,\n  text = paper_text\n)\n\nglimpse(df_fed_papers)\n\nRows: 85\nColumns: 3\n$ paper_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ author   &lt;chr&gt; \"hamilton\", \"jay\", \"jay\", \"jay\", \"jay\", \"hamilton\", \"hamilton…\n$ text     &lt;chr&gt; \"To the People of the State of New York:\\n\\nAfter an unequivo…\n\n\nSave to fed_papers.csv:\n\nwrite_csv(df_fed_papers, \"data/fed_papers.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data Sources</span>"
    ]
  }
]